<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="state" default="localization"/>

  <arg name="planner"        default="base"/>
  <arg name="global_planner" default="global_planner"/>
  <arg name="local_planner"  default="pal"/>
  <arg name="localization"   default="amcl"/>
  <arg name="mapping"        default="karto"/>
  <arg name="octomap"        default="false"/>
  <arg name="public_sim"     default="false"/>
  <arg name="robot_prefix"   default=""/>
  <arg name="multiple"       default="false"/>
  <arg name="laser_model"    default="sick-571"/>

  <arg name="map" default="$(env HOME)/.pal/pmb2_maps/config"/>

  <!-- Localization or Mapping state -->
  <node pkg="pal_navigation_sm" type="navigation.sh" name="navigation"
        args="pmb2 $(arg state) $(arg localization) $(arg mapping) $(arg map) $(arg octomap) $(arg multiple) $(arg robot_prefix)"/>

  <!-- Navigation State Machine -->
  <include file="$(find pmb2_2dnav)/launch/state_machine.launch">
    <arg name="state" value="$(arg state)"/>
    <arg name="public_sim" value="$(arg public_sim)"/>
    <arg if="$(arg multiple)" name="map_frame" value="/$(arg robot_prefix)/map"/>
    <arg if="$(arg multiple)" name="base_frame" value="/$(arg robot_prefix)/base_footprint"/>
  </include>

  <!-- Planning -->
  <include file="$(find pmb2_2dnav)/launch/move_$(arg planner).launch">
    <arg name="global_planner" value="$(arg global_planner)"/>
    <arg name="local_planner"  value="$(arg local_planner)"/>
    <arg name="public_sim"     value="$(arg public_sim)"/>
    <arg name="tf_prefix"      value="$(arg robot_prefix)"/>
    <arg name="multiple"       value="$(arg multiple)"/>
  </include>
  <include file="$(find robot_pose)/launch/robot_pose.launch">
    <arg name="robot_prefix"      value="$(arg robot_prefix)"/>
  </include>
  
  <!-- VO map server -->
  <group unless="$(arg public_sim)">
    <include file="$(find pal_vo_server)/launch/vo_server.launch">
      <arg name="fill_with_unknown" value="true"/>
      <arg name="vo_resolution" value="0.3"/>
    </include>
  </group>
  
  <!-- Laser filter (empty for public sim) -->
  <node name="laser_filter" pkg="laser_filters" type="scan_to_scan_filter_chain">
    <rosparam file="$(find pmb2_laser_sensors)/config/$(arg laser_model)_filter.yaml" 
              command="load" 
              unless="$(eval arg('public_sim') or arg('multiple'))"/>
    <remap from="scan"          to="scan_raw"/>
    <remap from="scan_filtered" to="scan"/>
  </node>

</launch>

